package com.company;

import com.company.GeneticAlgorithm.Simulations.Standard.MostInputted;
import com.company.GeneticAlgorithm.Simulations.Standard.MultiplicationSim;
import com.company.GeneticAlgorithm.Simulations.Standard.TicTacToe.TicTacToeMisere;
import com.company.GeneticAlgorithm.Simulations.Standard.TicTacToe.TicTacToeMisereGame;
import com.company.GeneticAlgorithm.Simulations.Standard.XORStandard;

import java.util.ArrayList;


public class Main
{

    static ArrayList<Integer> list = new ArrayList<>();

    public static void main(String[] args)
    {

        //XORSim();
        //sim();
        //MostInputted();
        long start = System.currentTimeMillis();
        TicTacToe();
        long end = System.currentTimeMillis();

        System.out.println(end - start);
        ///MVM();


        int var = 0;

        for(int i = 0; i < list.size(); i++)
        {
            var += list.get(i);
        }

        var /= 100;

        System.out.println(var);

    }

    private static void TicTacToe()
    {
        TicTacToeMisere g = new TicTacToeMisere(250, 9, 9,  9);
        g.run(3000);
    }

    private static void MVM()
    {
        byte[] DNA = {-85,50,0,124,59,32,0,0,-115,32,0,0,55,127,-101,0,-63,32,0,0,-63,19,-32,0,-76,32,0,0,65,17,27,7,-80,32,0,0,19,-116,0,0,60,16,0,0,65,32,0,0,-63,32,0,0,19,108,0,-28,-104,30,0,0,-63,32,0,0,-74,32,61,0,30,32,0,-7,65,32,0,0,-99,25,0,0,65,32,0,0,65,32,0,0,-73,40,0,-32,-63,32,0,0,65,32,0,0,5,-91,0,-17,-63,32,0,0,-63,32,0,0,59,32,0,104,3,32,-1,0,65,32,0,0,-109,32,0,0,46,32,0,-105,65,32,0,0,65,15,0,0,13,-29,0,0,-80,2,0,0,-113,32,0,0,-63,32,0,0,65,13,0,0,28,32,-39,0,-63,4,0,0,35,32,0,0,-76,32,0,0,65,32,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,65,32,0,0,-116,32,0,0,65,32,0,0,65,32,0,0,20,32,0,0,-63,32,0,0,45,32,0,0,15,32,0,0,65,14,0,0,45,32,0,0,-90,32,0,0,-63,32,0,0,-63,32,0,0,65,32,0,0,-80,32,0,-90,-63,32,0,0,-63,32,0,0,-63,32,0,0,-93,32,0,0,-118,32,74,0,-63,32,0,0,65,32,0,0,65,32,0,0,65,32,0,0,54,32,0,0,65,32,0,0,17,32,0,0,-63,32,0,0,-63,32,0,0,-114,32,0,0,65,32,0,0,65,32,0,0,-63,32,0,0,65,32,0,0,28,32,0,0,-63,32,0,0,41,32,0,0,-63,32,0,0,-63,32,0,0,65,32,0,0,-76,32,0,0,23,64,0,0,65,32,0,0,65,32,0,0,6,32,-47,0,12,30,0,0,8,32,0,0,13,112,0,-17,58,32,0,0,-75,-34,0,-100,-63,32,0,0,-105,32,0,0,59,27,0,99,-63,32,0,0,65,32,0,0,22,32,68,0,-63,32,0,0,65,32,0,0,36,32,105,0,65,32,0,0,-63,32,0,0,65,32,0,0,-89,32,0,0,-113,32,0,0,65,32,0,0,-107,32,0,0,-64,32,-123,-83,65,32,0,0,49,32,0,0,65,32,0,0,-63,32,0,0,65,32,0,0,65,32,0,0,65,32,0,0,-86,32,93,0,65,27,0,0,61,32,0,-56,-63,32,0,0,65,32,0,0,-63,32,0,0,26,32,-43,0,12,32,0,0,15,32,94,40,65,32,0,0,65,32,0,0,65,10,0,0,-63,32,0,0,-74,32,0,0,63,32,0,0,65,32,0,0,60,32,0,0,43,32,0,0,-63,32,0,0,35,32,0,0,65,32,0,0,-108,66,0,0,36,24,99,0,52,32,0,0,16,32,0,0,35,32,0,0,-63,32,0,0,-63,32,0,0,4,32,0,0,25,-87,0,0,6,32,0,0,-104,32,0,-86,-120,32,0,0,-94,32,0,0,65,32,0,0,-64,32,-126,0,40,29,-79,102,-94,-53,0,-103,-63,23,-27,0,-112,108,0,0,-105,32,0,-73,-63,32,0,0,35,32,0,0,-104,-3,0,0,58,-30,0,99,65,32,0,0,11,32,0,0,50,32,0,0,-63,32,0,0,28,32,0,0,-103,32,0,0,60,32,-16,0,65,32,0,0,65,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,-73,-93,55,78,-67,32,0,0,-115,113,-35,0,-81,32,-98,-120,65,32,0,0,65,32,0,0,65,32,0,0,65,32,0,0,65,32,0,0,-115,32,0,0,65,32,0,0,-105,-16,0,0,65,26,0,0,48,32,0,0,65,32,0,0,-127,32,17,0,-87,-66,-36,-3,11,32,0,0,65,32,0,0,55,59,0,0,-63,18,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,-63,32,0,0,53,32,-42,0,-123,32,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,35,32,-77,0,-92,92,0,0,-63,32,0,0,-63,32,0,0,65,32,0,0,-63,14,-116,0,-63,32,0,0,-63,32,0,0,-63,0,0,0,-63,32,0,0,-63,32,0,0,-70,32,0,-24,-105,32,0,0,-92,32,0,-2,-63,32,0,0,-96,21,0,-46,6,-123,0,0,65,32,0,0,-76,32,-109,-94,65,32,0,0,-88,32,0,0,65,32,0,0,-63,32,0,0,-63,32,0,0,-100,3,-102,0,65,32,0,0,-122,32,0,37,-99,52,0,0,-63,32,0,0,-85,32,0,0,-84,-26,0,-4,-81,32,0,0,54,32,0,0,65,32,0,0};
        byte[] DNA2 = {-63,32,0,0,4,32,0,0,-63,32,0,0,-108,32,0,0,-119,32,0,122,-63,32,0,0,-107,32,0,12,1,32,-31,9,65,32,0,0,-63,32,0,0,-86,-7,-44,0,65,32,0,0,38,32,0,0,-121,68,-23,-6,-78,32,0,0,-112,32,89,0,48,32,0,0,-85,32,0,0,-63,32,0,0,-85,32,0,0,-113,14,0,35,48,32,0,0,-98,32,0,0,-105,32,0,0,65,32,0,0,13,32,97,0,-63,32,0,0,14,32,0,39,65,32,0,0,65,32,0,0,38,32,0,0,-70,-35,0,0,14,-73,91,0,65,32,0,0,-63,32,0,0,65,32,0,0,44,32,-26,0,65,32,0,0,65,32,0,0,-102,32,-88,0,-88,32,0,0,65,32,0,0,65,32,0,0,-113,32,0,0,-63,32,0,0,39,32,7,0,65,32,0,0,-127,32,0,0,-63,32,0,0,38,32,0,0,65,32,0,0,-63,32,0,0,12,32,0,0,-123,32,0,0,65,32,0,0,-63,32,0,0,-64,32,0,0,65,32,0,0,65,32,0,0,-102,32,0,0,61,32,0,0,44,32,0,0,-121,32,0,0,-75,32,0,0,-102,32,0,0,-80,32,0,0,7,32,0,0,-128,32,25,0,27,32,0,0,30,14,0,0,-63,32,0,0,23,32,-49,0,-79,25,0,42,65,32,0,0,-63,32,0,0,65,32,0,0,61,32,0,0,22,32,0,29,48,32,0,-87,-63,32,0,0,57,32,0,0,65,32,0,0,-63,32,0,0,-85,-128,-96,0,43,32,114,0,-89,32,0,0,-107,32,17,0,29,32,0,0,-127,32,90,0,-79,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,-63,23,0,0,-121,-37,0,0,-120,31,-69,0,65,32,0,0,13,32,0,0,-63,32,0,0,-91,118,58,113,-63,32,0,0,-71,32,0,0,-63,32,0,0,65,32,0,0,65,32,0,0,65,32,0,0,-111,54,-81,105,-63,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,19,32,0,0,43,3,0,0,30,32,0,0,65,32,0,0,-115,32,0,-80,-115,32,0,0,65,32,0,0,-63,32,0,0,65,32,0,0,-88,125,0,0,-63,32,0,0,33,32,0,0,-91,32,0,0,56,-87,0,0,65,32,0,0,-96,10,0,0,43,32,0,0,-106,30,0,0,65,32,0,0,37,32,0,0,-75,39,-37,0,-63,32,0,0,56,32,98,0,-90,32,0,0,-128,32,0,6,65,32,0,0,-63,32,0,0,-63,32,0,0,65,32,0,0,65,32,0,0,65,32,0,0,65,32,0,0,-117,32,114,-80,65,32,0,0,65,32,0,0,-63,32,0,0,65,32,0,0,-78,-88,0,0,65,32,0,0,-79,113,0,4,-63,32,0,0,-74,32,0,0,65,32,0,0,-63,32,0,0,65,32,0,0,9,32,0,0,65,32,0,0,-63,21,0,24,42,32,0,0,65,32,0,0,-121,32,8,0,65,32,0,0,-94,97,-89,0,65,27,0,0,65,32,0,0,6,32,-43,0,-90,32,0,0,-63,32,0,0,29,-32,0,0,65,32,0,0,50,32,3,0,65,32,0,0,-84,32,0,0,-72,-29,0,0,65,32,0,0,23,-26,0,89,-106,32,-24,0,-86,32,0,-122,65,32,0,0,-96,32,0,0,22,32,0,0,-119,32,-9,0,-95,32,0,0,65,32,0,0,-63,23,0,0,-63,32,0,0,-63,32,0,0,-116,32,0,0,0,116,64,0,-65,-8,41,0,65,32,0,0,28,32,0,-88,65,32,0,0,65,32,0,0,65,32,0,0,-72,-57,58,0,-63,32,0,0,-126,32,0,0,-83,32,0,75,-97,32,0,0,8,85,0,0,-128,32,0,0,-63,32,0,0,-119,-27,0,0,-97,32,-4,0,-63,32,0,0,29,3,-38,0,-104,-73,0,0,65,32,0,0,-100,32,0,0,-75,32,0,0,65,32,0,0,-76,32,0,-95,-123,22,0,0,65,32,0,0,-97,32,0,73,65,32,0,0,65,32,0,0,-122,32,0,27,-63,32,0,0,46,32,0,0,42,32,0,-58,54,32,0,0,-111,-7,49,0,-70,21,0,-40,65,32,0,0,65,32,0,0,-66,32,0,45,65,32,0,0,65,32,0,0,65,32,0,0,65,32,0,0,-80,32,123,0,-73,32,0,0,34,20,0,0,25,19,0,0,-114,32,0,0,-128,1,-108,0,15,-52,0,0,-63,32,0,0,36,32,0,5,61,32,0,0};

        TicTacToeMisereGame g = new TicTacToeMisereGame();


        g.machineVMachine(DNA, DNA2, 9,9,9,9);

        try
        {
            Thread.sleep(3000);
        } catch (InterruptedException e)
        {
            e.printStackTrace();
        }

        System.out.println("Round 2!!");

        g.machineVMachine(DNA2, DNA, 9,9,9,9);


        //g.manVMachine(DNA , false, 9, 9, 9, 9);
    }

    private static  void MostInputted()
    {
        MostInputted MI = new MostInputted(1000, 11, 11, 1);

        MI.runUntil(90);
    }

    private static void XORSim()
    {
        /*
        XORGANN sim = new XORGANN(5000, 2, 1);
        sim.run();*/


        XORStandard sim = new XORStandard(5000, 2,4,1);
        list.add(sim.runUntil(60));

/*
        byte[] DNA = {-119,-64,27,54,-11,50,95,-54,115,116,-93,-76,-34,-101,53,16,-51,9,-54,-11,34,22,-117,115,-26,18,27,110,-28,-106,90,-6,-65,-37,-7,-23,-84,65,-118,-90,-47,-51,-25,4,87,-78,-109,-123};
        float[][] dataIn = {{0,0},{0,1},{1,0},{1,1}};
        float[] dataOut;
        NeuralNetwork test = new NeuralNetwork(2,4,1);
        test.setDNA(DNA);

        for(int i = 0; i < dataIn.length; i++)
        {
            dataOut = test.fire(dataIn[i]);

            System.out.println(dataOut[0]);
        }*/

    }

    private static void sim()
    {
        MultiplicationSim sim = new MultiplicationSim(10000, 4, 4, 4);//50000
        sim.run(100);
    }



}
