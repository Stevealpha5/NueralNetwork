package com.company;

import com.company.GANeuralNetwork.GANeuralNetwork;
import com.company.GeneticAlgorithm.Mating;
import com.company.GeneticAlgorithm.Simulations.Standard.MostInputted;
import com.company.GeneticAlgorithm.Simulations.Standard.MultiplicationSim;
import com.company.GeneticAlgorithm.Simulations.GANN.XORGANN;
import com.company.GeneticAlgorithm.Simulations.Standard.TicTacToe.TicTacToeMisere;
import com.company.GeneticAlgorithm.Simulations.Standard.TicTacToe.TicTacToeMisereGame;
import com.company.GeneticAlgorithm.Simulations.Standard.XORStandard;
import com.company.NuralNetwork.NeuralNetwork;
import com.company.Utils.XMLLogger;

import javax.xml.parsers.ParserConfigurationException;
import java.io.IOException;


public class Main
{

    public static void main(String[] args) throws ParserConfigurationException, InterruptedException
    {
        //XORSim();
        //sim();
        //MostInputted();
        TicTacToe();
        //MVM();

    }

    private static void TicTacToe()
    {
        TicTacToeMisere g = new TicTacToeMisere(1_000, 9, 9, 9, 9);
        g.run(3000);
    }

    private static void MVM()
    {
        byte[] DNA = {65,32,0,0,-98,32,0,103,-63,32,0,0,60,21,0,0,38,32,0,0,39,32,-28,50,-63,32,0,0,51,-52,0,-77,-63,32,0,0,65,32,0,0,65,32,0,0,-63,32,0,0,-115,32,108,0,-126,32,0,0,-123,32,0,0,-63,7,0,0,-63,32,0,0,65,32,0,0,9,32,0,0,10,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,65,32,0,0,40,32,100,0,35,104,-16,0,48,32,-42,-95,65,32,0,0,25,32,0,0,58,32,0,0,36,32,0,0,-124,32,0,0,-63,32,0,0,65,32,0,0,45,32,0,-43,37,103,0,0,-112,32,0,0,-87,32,0,-20,-85,12,0,0,65,32,0,0,62,-27,0,81,19,14,-78,0,65,32,0,0,-127,-112,0,0,-70,4,0,0,-63,32,0,0,38,-43,0,0,65,32,0,0,45,32,-55,0,-98,32,0,0,65,32,0,0,65,32,0,0,31,32,0,0,-127,32,0,52,65,32,0,0,-87,32,0,45,-85,-16,52,121,35,32,0,0,65,32,0,0,17,-82,0,0,65,32,0,0,58,21,-37,0,-115,32,0,0,65,15,0,0,-63,32,0,0,-66,32,0,0,40,32,0,0,-63,32,0,0,58,32,0,0,28,32,0,0,25,32,0,0,-72,32,0,-48,3,18,0,-114,-98,32,0,0,-118,29,0,0,-118,32,0,-97,-85,32,0,0,-73,7,0,26,-63,32,0,0,63,106,109,0,53,32,6,-44,39,-2,0,0,-69,32,0,0,-108,32,0,0,-63,32,0,0,65,32,0,0,65,4,0,0,-63,32,0,0,36,32,0,0,65,32,0,0,-86,117,0,0,59,32,0,38,65,32,0,0,-63,32,0,0,65,32,0,0,-106,-121,0,0,-122,2,63,0,-98,32,0,0,19,32,0,0,41,34,0,0,65,29,0,0,3,32,0,13,27,32,0,49,-63,32,0,0,-108,32,0,0,-94,-127,0,0,65,32,0,0,21,32,0,0,65,32,0,0,-63,32,0,0,-63,32,0,0,-75,10,0,-33,-115,12,0,0,58,32,0,0,29,32,-8,0,65,32,0,0,65,32,0,0,-86,32,0,0,-70,32,-107,48,-63,32,0,0,65,32,0,0,-63,32,0,0,-97,-13,-91,-11,65,32,0,0,-93,14,-113,-102,-63,32,0,0,-63,32,0,0,42,32,5,0,-63,32,0,0,65,5,-68,0,19,32,0,0,64,32,41,0,-124,32,29,0,-95,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,15,32,0,0,20,32,0,0,-119,32,0,-73,-63,32,0,0,16,32,-107,17,-94,32,0,-80,12,98,82,3,-63,32,0,0,65,32,0,0,49,32,0,0,14,8,-77,0,-112,101,0,36,-105,32,0,0,-93,19,-117,0,2,32,-73,0,44,123,0,0,-63,32,0,0,-63,32,0,0,65,32,0,0,-90,32,0,0,32,32,0,38,65,32,0,0,65,32,0,0,0,32,0,0,65,32,0,0,33,32,0,0,-63,32,0,0,-63,32,0,0,7,104,0,0,-78,32,87,0,65,32,0,0,37,22,0,0,-63,32,0,0,12,-26,-41,-51,65,32,0,0,65,32,0,0,-122,32,0,0,21,-95,0,0,-66,125,0,0,65,32,0,0,40,32,0,0,65,32,0,0,42,32,0,12,-63,32,0,0,-63,32,0,0,-63,32,0,0,-83,32,0,0,-92,77,0,116,65,32,0,0,-63,14,0,0,-63,32,0,0,55,32,0,0,41,32,-50,0,2,-16,0,0,-63,32,0,0,-63,32,0,0,65,32,0,0,35,32,0,0,65,32,0,0,12,32,-101,88,1,32,0,0,54,103,0,92,-63,32,0,0,29,32,0,0,65,32,0,0,-96,32,0,0,37,32,0,0,24,32,0,0,3,32,0,0,-63,32,0,0,-113,32,0,0,65,32,0,0,-63,3,0,0,-63,2,0,0,54,14,-114,119,31,32,0,0,65,32,0,0,65,32,0,0,65,32,0,0,56,-18,0,0,4,32,27,0,65,32,0,0,5,32,0,0,-79,32,0,45,13,32,0,0,-80,32,-117,-32,65,16,0,102,-63,32,0,0,-80,32,0,0,-102,32,0,0,48,32,0,0,-63,18,0,-49,65,32,0,0,-63,32,0,0,-72,55,0,0,-111,78,0,102,65,32,0,0,65,32,0,0,-125,32,0,3,-63,32,0,0,24,32,0,0,-63,32,0,0,18,32,0,0,-72,32,0,0,5,26,-99,0};
        byte[] DNA2 = {-63,32,0,0,-63,32,0,0,65,32,0,0,65,32,0,0,63,32,-86,0,-63,32,0,0,61,32,0,0,63,14,0,0,59,32,0,0,65,32,0,0,65,32,0,0,-63,13,0,52,65,32,0,0,65,32,0,0,62,32,0,0,65,32,0,0,60,32,0,0,-63,32,0,0,65,32,0,0,65,32,0,0,50,32,0,0,-82,32,51,0,-63,32,0,0,-69,32,0,0,-63,27,0,-36,41,-44,-105,0,62,32,0,0,-63,32,0,0,-116,-5,7,0,51,32,0,0,31,32,0,-63,63,32,97,0,-121,4,0,-72,65,21,-9,6,23,32,0,-37,-121,32,0,0,57,32,0,0,-66,32,-85,0,65,32,0,0,-63,32,0,0,-114,32,0,0,-63,32,0,0,65,32,0,0,-92,-55,0,24,-63,32,0,0,62,32,-52,0,-63,7,0,0,-76,19,0,20,-87,32,52,0,65,32,0,0,-127,-75,63,0,11,32,0,0,51,32,0,78,65,32,0,0,-63,32,0,0,59,32,83,97,28,32,0,-49,65,32,0,0,23,32,-119,0,-117,32,0,0,18,44,0,35,65,32,0,0,19,32,0,0,49,32,0,0,43,32,0,0,-97,32,25,0,65,32,0,0,34,95,0,0,63,32,0,0,65,32,0,0,-108,32,0,8,-85,32,0,0,-89,77,0,-61,-63,32,0,0,32,32,44,101,62,4,0,0,-125,32,98,0,61,32,0,0,10,11,0,0,65,32,0,0,42,32,77,-13,-63,32,0,0,-63,32,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,65,32,0,0,-97,32,0,0,-121,32,66,0,-127,32,0,0,-63,32,0,0,59,32,0,0,65,32,0,0,-101,32,0,0,-78,32,-44,0,-94,32,0,110,-124,32,0,0,-110,32,0,118,65,32,0,0,65,32,0,0,-96,32,0,0,-117,32,0,0,65,32,0,0,-96,32,-91,0,-92,16,0,0,65,32,0,0,63,23,0,34,8,32,0,0,55,-41,0,0,65,32,0,0,-63,32,0,0,64,-109,100,-77,65,32,0,0,-63,32,0,0,62,32,-37,0,-87,32,113,0,-69,-68,-13,0,28,32,0,0,65,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,62,32,0,94,-120,32,0,0,62,-97,0,0,62,32,0,0,-79,86,0,0,65,32,0,0,65,32,0,0,-91,32,0,0,65,32,0,0,2,32,0,0,65,32,0,0,44,53,-67,0,-63,32,0,0,10,32,117,0,35,101,0,0,52,32,0,0,-100,32,0,0,-63,32,0,0,-81,32,25,0,-63,32,0,0,61,32,0,0,61,32,0,0,65,14,0,0,-68,32,0,0,65,32,0,0,63,32,-74,0,65,32,0,0,65,32,0,0,-80,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,-73,12,0,0,24,32,0,0,25,32,0,0,63,32,0,0,63,32,0,0,65,32,0,0,35,32,0,0,10,-72,0,105,65,32,0,0,46,61,0,0,36,32,-3,-108,-90,-14,-10,0,-76,32,0,109,65,32,0,0,65,32,0,0,-95,32,48,0,35,32,34,-118,16,32,0,0,-63,32,0,0,-110,32,0,0,63,32,-48,0,-63,32,0,0,-63,32,0,0,13,32,0,0,65,32,0,0,65,32,0,0,65,32,0,0,62,32,0,98,54,32,9,-105,-104,32,-122,0,-80,32,0,0,-83,32,-128,0,-105,32,0,0,63,32,-110,0,19,88,2,0,3,32,0,0,65,32,0,0,62,32,0,0,64,32,0,0,63,32,0,67,65,32,0,0,61,32,0,0,65,32,0,0,6,32,0,-26,26,32,0,45,65,32,0,0,62,32,-79,0,65,32,0,0,22,32,0,0,-63,32,0,0,-128,37,-34,-13,65,32,0,0,65,24,0,0,-63,32,0,0,-63,32,0,0,-101,32,0,104,55,32,0,0,-63,32,0,0,-63,32,0,0,-89,89,101,0,-63,32,0,0,-63,6,0,-57,-105,20,-114,0,62,32,0,79,65,32,0,0,-63,32,0,0,-63,32,0,0,25,32,19,-69,53,32,0,0,65,32,0,0,49,32,0,38,44,-19,0,0,65,32,0,0,-113,65,0,0,65,32,0,0,65,32,0,0,49,32,0,0,-63,32,0,0,-70,32,0,0,-63,32,0,0,36,32,0,0,-63,29,0,0,9,32,0,0,40,32,0,0,38,-111,0,-99,-128,32,-55,0,-125,32,0,-14};

        TicTacToeMisereGame g = new TicTacToeMisereGame();

/*
        g.machineVMachine(DNA, DNA2, 9,9,9,9);

        try
        {
            Thread.sleep(3000);
        } catch (InterruptedException e)
        {
            e.printStackTrace();
        }

        System.out.println("Round 2!!");

        g.machineVMachine(DNA2, DNA, 9,9,9,9);*/


        g.manVMachine(DNA , false, 9, 9, 9, 9);
    }

    private static  void MostInputted()
    {
        MostInputted MI = new MostInputted(1000, 11, 11, 1);

        MI.runUntil(90);
    }

    private static void XORSim()
    {
        /*
        XORGANN sim = new XORGANN(5000, 2, 1);
        sim.run();*/


        XORStandard sim = new XORStandard(5000, 2,4,1);
        sim.runUntil(60);

/*
        byte[] DNA = {-119,-64,27,54,-11,50,95,-54,115,116,-93,-76,-34,-101,53,16,-51,9,-54,-11,34,22,-117,115,-26,18,27,110,-28,-106,90,-6,-65,-37,-7,-23,-84,65,-118,-90,-47,-51,-25,4,87,-78,-109,-123};
        float[][] dataIn = {{0,0},{0,1},{1,0},{1,1}};
        float[] dataOut;
        NeuralNetwork test = new NeuralNetwork(2,4,1);
        test.setDNA(DNA);

        for(int i = 0; i < dataIn.length; i++)
        {
            dataOut = test.fire(dataIn[i]);

            System.out.println(dataOut[0]);
        }*/

    }

    private static void sim()
    {
        MultiplicationSim sim = new MultiplicationSim(10000, 4, 4, 4);//50000
        sim.run(100);
    }



}
