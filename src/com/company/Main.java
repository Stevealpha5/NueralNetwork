package com.company;

import com.company.GANeuralNetwork.GANeuralNetwork;
import com.company.GeneticAlgorithm.Mating;
import com.company.GeneticAlgorithm.Simulations.Standard.MostInputted;
import com.company.GeneticAlgorithm.Simulations.Standard.MultiplicationSim;
import com.company.GeneticAlgorithm.Simulations.GANN.XORGANN;
import com.company.GeneticAlgorithm.Simulations.Standard.TicTacToe.TicTacToeMisere;
import com.company.GeneticAlgorithm.Simulations.Standard.TicTacToe.TicTacToeMisereGame;
import com.company.GeneticAlgorithm.Simulations.Standard.XORStandard;
import com.company.NuralNetwork.NeuralNetwork;
import com.company.Utils.XMLLogger;

import javax.xml.parsers.ParserConfigurationException;
import java.io.IOException;


public class Main
{

    public static void main(String[] args) throws ParserConfigurationException, InterruptedException
    {
        //XORSim();
        //sim();
        //MostInputted();
        TicTacToe();
        //MVM();

    }

    private static void TicTacToe()
    {
        TicTacToeMisere g = new TicTacToeMisere(1_000, 9, 9, 9, 9);
        g.run(3000);
    }

    private static void MVM()
    {
        byte[] DNA = {65,13,0,0,-63,32,0,0,-87,32,44,0,45,28,0,107,49,-74,0,0,-63,32,0,0,-73,32,0,-31,-112,32,0,-118,65,32,0,0,17,-49,0,8,7,-103,0,0,34,32,0,8,-121,32,0,0,-63,32,0,0,-102,32,0,0,23,31,98,0,-63,32,0,0,-96,32,0,0,56,32,0,0,65,32,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,-103,86,3,0,-102,32,0,0,65,32,0,0,-63,32,0,0,-63,32,0,0,-76,32,0,0,-83,86,0,0,48,7,0,-27,49,32,0,0,26,34,0,0,56,32,0,0,52,32,0,0,-126,32,0,71,8,32,74,0,27,-41,0,110,-63,32,0,0,-74,32,0,0,-63,32,0,0,-63,32,0,0,23,32,0,0,-63,32,0,0,-63,10,0,0,65,32,0,0,-118,17,0,0,65,32,0,0,-63,32,0,0,-63,32,0,0,-85,32,0,0,-63,32,0,0,-112,32,0,98,-63,32,0,0,-116,-26,96,0,-75,32,0,0,65,32,0,0,63,32,53,0,-96,32,0,0,-102,0,0,0,65,32,0,0,-63,32,0,0,65,32,0,0,63,32,0,0,30,32,0,0,-63,32,0,0,17,32,0,0,65,32,0,0,-65,32,0,-116,-113,32,0,103,-63,32,0,0,-63,32,0,0,-66,88,0,0,-63,32,0,0,-96,32,0,1,-97,124,0,0,-63,32,0,0,-96,32,0,0,-126,32,0,0,51,-113,0,33,65,32,0,0,-63,32,0,0,-110,32,0,0,-63,32,0,0,27,32,0,0,65,32,0,0,-63,32,0,0,-63,32,0,0,36,32,0,0,60,32,0,0,-63,32,0,0,62,86,0,0,-94,32,0,0,-63,32,0,0,-90,32,-2,0,-63,32,0,0,-126,32,0,0,-63,32,0,0,65,32,0,0,62,32,-45,0,-63,32,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,42,32,0,0,54,116,0,0,17,32,0,0,-63,32,0,0,-63,32,0,0,-115,32,0,0,65,30,0,47,-63,32,0,0,62,32,0,-81,-78,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,27,32,0,0,-69,32,0,0,-63,32,0,0,65,32,0,0,65,32,0,0,60,32,-128,-57,-63,32,0,0,-98,13,0,0,-63,32,0,0,-105,32,0,0,65,32,0,0,65,32,0,0,-63,32,0,0,12,3,0,53,-74,32,0,0,-63,32,0,0,29,32,0,0,-97,32,0,0,27,32,0,0,65,32,0,0,15,32,-93,0,53,32,0,0,-63,32,0,0,43,32,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,59,32,0,0,-63,32,0,0,65,32,0,0,61,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,65,32,0,0,-81,32,-34,52,-63,32,0,0,65,32,0,0,65,32,0,0,-63,32,0,0,-95,32,0,0,-63,32,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,29,32,50,0,-100,32,0,0,18,32,-123,0,65,32,0,0,-86,32,0,0,-92,32,0,0,64,28,0,0,-63,32,0,0,-93,32,0,0,-63,32,0,0,-63,32,0,0,60,32,0,0,46,32,0,0,65,30,0,0,-63,32,0,0,-63,32,0,0,65,32,0,0,-75,32,0,0,-127,105,0,0,19,32,0,0,-101,32,0,0,65,32,0,0,-109,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,-103,32,0,10,-66,116,-72,-67,-125,32,0,0,63,32,0,0,-63,32,0,0,65,32,0,0,65,21,0,0,10,32,0,0,6,-94,0,0,-99,32,0,-114,11,81,0,0,-102,32,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,8,32,-25,-8,-63,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,-96,32,0,0,65,32,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,-113,32,0,0,65,32,0,0,1,32,0,0,-63,32,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,65,32,0,0,-99,32,0,0,-100,32,0,0,59,32,0,-2,63,32,0,0,-76,32,0,0,-104,32,0,0,-86,32,0,0,-105,-34,0,0,-103,-117,0,0,-66,20,0,0,65,32,0,0,-80,32,0,0,12,32,0,0,-63,32,0,0,65,12,0,-27};
        //{-102,32,0,0,16,-82,0,0,65,32,0,0,-63,32,0,0,10,32,0,0,-63,32,0,0,38,32,0,0,65,32,0,0,65,32,0,0,-63,32,0,0,65,32,0,0,47,32,0,26,-63,32,0,0,-71,32,0,0,-63,32,0,0,-83,32,35,0,-63,32,0,0,-65,32,-25,0,47,32,0,0,55,32,0,-61,-110,32,0,0,65,0,0,96,42,32,0,0,-81,32,0,0,-63,32,0,0,-63,25,0,0,60,32,0,0,65,32,0,0,-112,32,0,0,-67,110,0,0,48,28,0,0,-63,32,0,0,-93,32,0,0,34,32,0,0,-63,32,0,0,48,32,0,0,-63,32,0,0,-63,32,0,0,59,32,0,0,-63,32,0,0,38,32,0,0,65,32,0,0,38,32,0,0,-90,32,60,0,16,32,0,0,-108,32,0,27,-107,32,0,0,41,-31,0,105,-67,32,-72,0,65,32,0,0,26,32,-88,-24,-63,0,0,60,65,32,0,0,-78,32,0,0,-63,32,0,0,62,32,0,0,-124,-109,0,0,-63,32,0,0,3,-33,0,-125,-63,27,0,-67,-63,32,0,0,-124,32,0,0,7,51,0,0,12,-40,0,0,-63,32,0,0,-63,32,0,0,-74,16,72,0,-63,32,0,0,-63,32,0,0,40,19,117,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,43,32,0,0,26,32,0,0,41,32,0,0,65,14,0,0,37,5,0,0,65,32,0,0,-63,32,0,0,-63,32,0,0,65,19,0,0,-113,32,0,0,-63,24,0,0,65,32,0,0,-63,32,0,0,-63,32,0,0,3,32,0,0,-63,32,0,0,-127,32,0,0,8,32,0,0,39,32,0,0,-63,28,0,0,-63,32,0,0,38,32,0,0,65,32,0,0,-120,-45,0,0,65,32,0,0,-63,32,0,0,-65,32,0,0,-63,32,0,0,-77,31,96,0,58,32,0,0,46,32,0,0,0,32,0,-62,-63,29,-48,0,56,32,0,-94,-126,32,0,0,63,32,0,-122,43,60,0,0,-104,32,0,0,-63,32,0,0,-91,42,0,0,-121,32,-72,0,-105,32,0,0,-81,6,0,0,-87,32,0,-18,5,32,0,0,-63,32,0,0,-95,32,0,24,12,32,0,-46,65,32,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,46,32,0,0,-63,32,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,-105,2,95,0,48,32,0,0,65,32,0,0,-85,32,0,0,-97,32,-95,0,-63,32,0,0,-103,-92,0,0,-63,32,0,0,-63,32,0,0,-108,32,93,0,-98,41,0,0,-63,32,0,0,-88,32,0,-39,-90,11,0,0,-86,32,0,0,-63,32,0,0,-63,32,0,0,-114,-30,0,0,-63,32,0,0,7,32,0,0,-107,32,4,0,-101,32,0,0,-63,32,0,0,65,3,31,0,60,-106,0,0,-121,10,0,0,-63,32,0,0,65,32,0,0,-104,56,0,0,51,32,0,0,-63,32,0,0,-63,32,0,0,2,32,0,0,-63,32,0,0,65,32,0,0,65,32,0,0,53,32,-44,0,65,23,0,0,-109,32,0,-43,65,32,0,0,17,32,0,0,11,32,0,0,-111,32,0,0,-110,32,0,0,-70,-62,79,0,65,32,0,0,15,32,0,0,65,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,51,17,0,0,1,32,0,0,-66,32,0,0,65,32,0,0,65,32,0,0,29,32,0,0,0,32,0,0,-63,24,0,0,-63,32,0,0,15,32,0,0,46,32,0,-35,47,32,0,0,65,32,0,0,65,32,0,0,-121,32,0,0,-76,28,0,0,54,32,0,127,-63,32,0,0,17,7,0,0,6,32,0,0,65,32,0,0,49,32,0,-92,60,32,0,0,-81,28,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,-88,20,0,0,22,32,54,-11,-111,32,0,0,-63,5,0,0,62,32,0,0,27,32,0,0,55,32,0,0,-86,32,0,0,-117,-125,0,0,-63,32,0,0,65,32,0,0,-63,32,0,0,65,32,0,0,65,32,0,0,65,32,0,0,-63,32,0,0,65,20,0,0,65,32,0,0,6,16,0,-25,65,32,0,0,65,32,0,0,5,32,0,0,-95,32,0,0,65,32,0,0,-104,32,0,0,65,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,-63,32,0,0,-100,32,0,0,65,32,0,0,-92,26,0,0,65,32,0,0,}
        TicTacToeMisereGame g = new TicTacToeMisereGame();
        g.manVMachine(DNA , 9, 9, 9);
    }

    private static  void MostInputted()
    {
        MostInputted MI = new MostInputted(1000, 11, 11, 1);

        MI.runUntil(90);
    }

    private static void XORSim()
    {
        /*
        XORGANN sim = new XORGANN(5000, 2, 1);
        sim.run();*/


        XORStandard sim = new XORStandard(5000, 2,4,1);
        sim.runUntil(60);

/*
        byte[] DNA = {-119,-64,27,54,-11,50,95,-54,115,116,-93,-76,-34,-101,53,16,-51,9,-54,-11,34,22,-117,115,-26,18,27,110,-28,-106,90,-6,-65,-37,-7,-23,-84,65,-118,-90,-47,-51,-25,4,87,-78,-109,-123};
        float[][] dataIn = {{0,0},{0,1},{1,0},{1,1}};
        float[] dataOut;
        NeuralNetwork test = new NeuralNetwork(2,4,1);
        test.setDNA(DNA);

        for(int i = 0; i < dataIn.length; i++)
        {
            dataOut = test.fire(dataIn[i]);

            System.out.println(dataOut[0]);
        }*/

    }

    private static void sim()
    {
        MultiplicationSim sim = new MultiplicationSim(10000, 4, 4, 4);//50000
        sim.run(100);
    }



}
